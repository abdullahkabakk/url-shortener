name: Go

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Run Golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.54

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: ./...

      - name: Parse Gosec Output
        id: parse_output
        run: |
          VULNERABILITIES=$(grep -o 'Total issues: [0-9]*' gosec_output.txt | awk '{print $3}')
          echo "vulnerabilities=${VULNERABILITIES}" >> $GITHUB_OUTPUT

      - name: Set Vulnerability Count
        run: echo "VULNERABILITY_COUNT=${{ steps.parse_output.outputs.vulnerabilities }}" >> $GITHUB_ENV

      - name: Update README.md with Vulnerability Count
        run: sed -i "s/X/${{ env.VULNERABILITY_COUNT }}/g" README.md

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [lint, security-scan]
    environment: development
    env:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      HOST: ${{ secrets.HOST }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      PORT: ${{ secrets.PORT }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Start MySQL
        run: |
           sudo /etc/init.d/mysql start
           mysql -e 'CREATE DATABASE ${{ env.DB_NAME }};' -u${{ env.DB_USERNAME }} -p${{ env.DB_PASSWORD }}

      - name: Run Tests with Code Coverage
        run: go test ./... -covermode=count -coverpkg=./... -v -coverprofile=coverage.out
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: abdullahkabakk/url-shortener

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build App
        run: |
          go build -o url-shortener .

      - name: Archive Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: url-shortener